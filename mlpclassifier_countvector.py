# -*- coding: utf-8 -*-
"""MLPClassifier_countvector.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FA6TDU7wJib_kwAL18npPsz307ANjNuW
"""

import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn import model_selection
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import f1_score

np.random.seed(500)
Corpus = pd.read_csv(r"/content/New_training_6_novels.csv",encoding='latin-1')
sep_test = pd.read_csv(r"/content/1920s_crime_author.csv", encoding='latin-1')

# Confirm no blank rows
Corpus['texts'].dropna(inplace=True)

Train_X, Test_X, Train_Y, Test_Y = model_selection.train_test_split(Corpus['texts'],Corpus['label'],test_size=0.3, random_state=16)

# create the vocabulary
vectorizer = CountVectorizer()
vectorizer.fit(Corpus['texts'])
Train_countV = vectorizer.transform(Train_X)
Test_countV = vectorizer.transform(Test_X)

# prep test set

Val_countV = vectorizer.transform(sep_test['texts'])
val_y = sep_test['label']

y_train = Train_Y
y_test = Test_Y

X_train = Train_countV

X_test = Test_countV

# separate test set
X_val = Val_countV

#Importing MLPClassifier
from sklearn.neural_network import MLPClassifier

#Initializing the MLPClassifier
classifier = MLPClassifier(hidden_layer_sizes=(155,), max_iter=300,activation = 'relu',solver='adam',random_state=1, learning_rate = 'constant', alpha=0.0001)#)

#Fitting the training data to the network
classifier.fit(X_train,y_train)

#Using the trained network to predict

#Predicting y for X_val
y_pred = classifier.predict(X_test)

#Predicting y for X_val
val_pred = classifier.predict(X_val)

# import the metrics class
from sklearn import metrics

#Importing Confusion Matrix
from sklearn.metrics import confusion_matrix

#Comparing the predictions against the actual observations in y_val

cm = confusion_matrix(val_y, val_pred, labels=classifier.classes_)
disp = ConfusionMatrixDisplay(confusion_matrix=cm,
                               display_labels=classifier.classes_)
disp.plot()

plt.show()

sep_test['predictions'] = val_pred

#print(sep_test)

#sep_test.to_csv("MLP_approx_100_words_validation_set_results_2.csv", index=False, encoding='utf-8')

#Printing the accuracy
print("Accuracy Train/ Test Set: ", metrics.accuracy_score(y_test, y_pred))
print("Precision Train/ Test Set: ", metrics.precision_score(y_test, y_pred))
print("Recall Train/ Test Set: ", metrics.recall_score(y_test, y_pred))
print("F1 Train/ Test Set:", metrics.f1_score(y_test, y_pred))
print("Accuracy Validation Set:", metrics.accuracy_score(val_y, val_pred))
print("Precision Validation Set:", metrics.precision_score(val_y, val_pred))
print("Recall Validation Set:", metrics.recall_score(val_y, val_pred))
print("F1 Accuracy Validation Set:", metrics.f1_score(val_y, val_pred))